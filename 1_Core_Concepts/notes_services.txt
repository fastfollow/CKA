You can consider a service as a virtual server inside of the node with its own IP address (cluster ip)
Services are connecting via labels and selectors, do not rely on IP adresses they aren't static

NodePort: maps pod port to node port (PORTS RANGE: 30000 -32767)


HOW-TO-USE:


1. External communication

1.1. EASY EXAMPLE
INPUT:
Laptop: 192.168.1.10
Node: 192.168.1.2
Pod: web-app
Pod Network: 10.244.0.0
Pod IP: 10.244.0.2
GOAL:
Get access from laptop to web application
SOLUTION:
- go to node and try: > curl http://10.244.0.2
- understand, that you want to get an access from laptop with, for instance, > curl http://192.168.0.2
- what will connect node network to pod network? Service.
- Service will listhen the port on the NODE and dispatch it to the pod
- use NodePort for this task, confugure port 30008
- curl http://192.168.0.2:30008

# FLOW & TERMS: flow looks like this: curl-> Node, port 30008 (NODE PORT) -> service 80 port (PORT)  -> pod 80 port (TARGET PORT)
# PORT - mandatory field. If there is no target port, port will be used. If there is no node port, it will be choosen automatically from free range
# Ports is array so you can add multiple mappings.

1.2. MULTIPLE PODS
INPUT
Laptop: 192.168.1.10
Node: 192.168.1.2
Pod: web-app
Pod Network: 10.244.0.0
Pod1 IP: 10.244.0.1
Pod2 IP: 10.244.0.2
Pod3 IP: 10.244.0.3
GOAL: The same as 1.1. but we have scaled application 
SOLUTION:
Nothing else! bc the selection process is working via labels 

1.3. MULTIPLE NODES
INPUT:
Laptop: 192.168.1.10
Node1: 192.168.1.2
Node2: 192.168.1.3
Node3: 192.168.1.4
Pod: web-app
Pod Network: 10.244.0.0
Pod1 IP (Node1): 10.244.0.3
Pod2 IP (Node2): 10.244.0.2
Pod3 IP (Node3): 10.244.0.4
GOAL: The same as 1.1., 1.2. but we have scaled nodes
SOLUTION:
Nothing else! bc Kubernets applies all services to all nodes, You can choose any node IP to get an access


2. Internal communication

2.1. MULTIPLE PODS for BACK, FRONT, DB
INPUT
Frontend Pods: 10.244.0.3, 10.244.0.2, 10.244.0.4
Backend Pods: 10.244.0.5, 10.244.0.6,10.244.0.7
Redis Pods: 10.244.0.8, 10.244.0.9, 10.244.0.10
Front must communicate with Back, Back - with Redis 
SOLUTION:
- Create clusterIP for Backend
- Create clusterIP for Frontend
- Create clusterIP for Redis

3. Load Balancer

