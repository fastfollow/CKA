#Create an NGINX Pod
kubectl run nginx --image=nginx
kubectl run custom-nginx --image=nginx --port=8080
kubectl expose pod httpd --name=httpd --type=ClusterIP --port=80

#Generate POD Manifest YAML file (-o yaml). Don't create it(--dry-run)
kubectl run nginx --image=nginx --dry-run=client -o yaml


#Create a deployment
kubectl create deployment --image=nginx nginx
# Label Pod
kubectl label pods redis tier=db


#Generate Deployment YAML file (-o yaml). Don't create it(--dry-run)
kubectl create deployment --image=nginx nginx --dry-run=client -o yaml

#Generate Deployment YAML file (-o yaml). Don't create it(--dry-run) with 4 Replicas (--replicas=4)
kubectl create deployment --image=nginx nginx --dry-run=client -o yaml > nginx-deployment.yaml

#Generate Deployment with 4 Replicas
kubectl create deployment nginx --image=nginx --replicas=4
#or scale existed
kubectl scale deployment nginx --replicas=4


#Create a Service named redis-service of type ClusterIP to expose pod redis on port 6379
kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml
kubectl create service clusterip redis --tcp=6379:6379 --dry-run=client -o yaml

#Create a Service named nginx of type NodePort to expose pod nginx's port 80 on port 30080 on the nodes:
kubectl expose pod nginx --type=NodePort --port=80 --name=nginx-service --dry-run=client -o yaml
#or
kubectl create service nodeport nginx --tcp=80:80 --node-port=30080 --dry-run=client -o yaml

#exec into container example
kubectl -n elastic-stack exec -it app -- cat /log/app.log