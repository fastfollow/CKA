#basically, you can access to your cluster with:

curl https://kubernetes.cluster:6443/api/v1/pods \
--key admin.key
--cert admin.crt
--cacert ca.crt

#too complicated so this data moved to Kubeconfig and youre using kubectl

it placed in
~/.kube/config

Config file has 3 sections:
1. Clusters
- Dev
- Pro
- Google
- AWS

2. Context
#which user to which environment
- admin@Google
- dev@Dev
- prod-operator@prod
- dev@AWS


3. Users
- admin
- dev
- prod-operator

SO:
#basically, you can access to your cluster with:

curl https://kubernetes.cluster:6443/api/v1/pods \ -> CLUSTER SECTION
--key admin.key -> USER SECTION
--cert admin.crt
--cacert ca.crt

Example for 1 context:

apiVersion: v1
kind: Config
current0context: admin-user@kubernetes.cluster
clusters:
  - name : kubernetes.cluster
    cluster:
     certificate-authority: ca.crt #it's better to use full path OR use certificate-authority-data:
     server: https://kubernetes.cluster:6443

contexts:
  - name: admin-user@kubernetes.cluster
    context:
      cluster: kubernetes.cluster
      user: admin-user
      #namespace: default

users:
  - name: admin-user
    user:
      client-certificate: admin.crt
      client-key: admin.key
  - name: prod-operator

#how to view
kubectl config view
#how to set context
kubctl set current-context <name>
#how to use certificate-authority-data?
cat ca.crt | base64


#external file:
kubectl config --kubeconfig /root/my-kube-config current-context 
kuebctl config --kubeconfig /root/my-kube-config use-context




