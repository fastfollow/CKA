Secreat are similar to config maps but are encypted

imperative: 
kubectl create secret generic <secretname> --from-literal=<key>=<value>
kubectl create secret generic app-secret --from-literal=DB_Host=mysql --from-literal=DB_User=root --from-literal=DB_Password=paswrd
OR
kubectl create secret generic <secretname> --from-file=<path>
kubectl create secret generic app-secret --from-file=app_secret.properties


declarative
kubectl create -f

#plain_tx
apiVersion: v1
kind: Secret
metadata:
  name: app-secret
data:
  DB_Host: mysql #how to encode: echo -n 'mysql' | base64
  DB_User: root #how to encode: echo -n 'root' | base64
  DB_Password: paswrd #how to encode: echo -n 'paswrd' | base64

#commands:
kubectl get secrets
kubectl describe secrets (shown in bytes)
kubectl get secrent app-secrtet -o yaml (hashed)
#how to decode
echo -n 'bXlzcWw' | base64 --decode

#Configuring to Pod
spec:
    containers:
        - name: simple-webapp-color
          image: simple-webapp-color
          #command: ["sleep2.0"] #ENTRYPOINT in DockerFile
          #args: ["10"] #CMD in DockerFile
          ports:
            - containerPort: 8080
          envFrom:
            - secretRef:
                name: app-secret #as in secret

#OR 
spec:
    containers:
        - name: simple-webapp-color
          image: simple-webapp-color
          #command: ["sleep2.0"] #ENTRYPOINT in DockerFile
          #args: ["10"] #CMD in DockerFile
          ports:
            - containerPort: 8080
          env:
            - name: DB_Password
                valueFrom:
                  secretKeyRef:
                    name: app-secret
                    key: DB_Password

#OR

pec:
    containers:
        - name: simple-webapp-color
          image: simple-webapp-color
          #command: ["sleep2.0"] #ENTRYPOINT in DockerFile
          #args: ["10"] #CMD in DockerFile
          ports:
            - containerPort: 8080
          volumes:
            -name: app-secret-volume
             secret:
               secretName: app-secret
#in this case, pod's secret will be ls /opt/app-secret-volumes; then try cat them

#there are other better ways of handling sensitive data like passwords in Kubernetes, such as using tools like Helm Secrets, HashiCorp Vault. I hope to make a lecture on these in the future.